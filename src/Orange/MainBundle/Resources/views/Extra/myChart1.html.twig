<script type="text/javascript">
	//vues statitique
		{% if role==2 %}
				 series=[];
				 var arrStructure = [];
				
				{% for c,value in structures %}
					arrStructure[{{ loop.index0 }}] = '{{ value['libelle'] }}';
				{% endfor %}
				var i=0;
				{% for libelle, stats in graphe %}
							series[{{ loop.index0 }}] = new Object();
							series[{{ loop.index0 }}].name = '{{ libelle|escape('js')  }}';
				{% endfor %}
				{% for libelle, stats in graphe %}
				     	series[{{ loop.index0 }}].data = [];
						{%  for cle, val in stats  %}
									series[{{ loop.parent.loop.index0 }}].data.push({{ val }});
						{% endfor %}
				{% endfor %}
				myChart (arrStructure, series,"#mychartByStr",'Structures');
		{% endif %}

	// fonction pour graphe par instance
	{% if role==1 or role==4 %}
	 series=[];
	 var arrInstance = [];
	
		{% for c in instances %}
			arrInstance[{{ loop.index0 }}] = '{{ c.libelle }}';
		{% endfor %}
	var i=0;
	{% for libelle, stats in graphe %}
				series[{{ loop.index0 }}] = new Object();
				series[{{ loop.index0 }}].name = '{{ libelle|escape('js')  }}';
	{% endfor %}
	{% for libelle, stats in graphe %}
	     series[{{ loop.index0 }}].data = [];
			{%  for cle, val in stats  %}
						series[{{ loop.parent.loop.index0 }}].data.push({{ val }});
			{% endfor %}
		{% endfor %}
		myChart (arrInstance, series,"#mychartByInst",'Portees');
		{% endif %}

 // vue stat admin
 {% if role==0 or role==3 %}
	  var arrInstance = [];
		{% for c in instances %}
			arrInstance[{{ loop.index0 }}] = '{{ c.libelle }}';
		{% endfor %}
		var k=0;
	  {% for cle, ligne in graphe %}
	 	var seriesI=[];
	 	 k++;
	 	var i=0;
	 	{% for libelle, stat in ligne %}
		 				seriesI[{{ loop.index0 }}] = new Object();
		 				seriesI[{{ loop.index0 }}].name = '{{ libelle|escape('js')  }}';
	 	{% endfor %}
	 		{% for libelle, stat in ligne %}
	 		    	 seriesI[{{ loop.index0 }}].data = [];
		 			{%  for cle, valeur in stat  %}
		 						seriesI[{{ loop.parent.loop.index0 }}].data.push({{ valeur }});
		 			{% endfor %}
	 		{% endfor %}
	  var id='#mychartStat-'+k;
	  myChart (arrInstance, seriesI,id,'{{ cle }}');
	  {% endfor %}
{% endif %}

 function myChart (categories , series, id, lib) {
	    $(id).highcharts({
	    	colors: ['#f0ad4e', '#5cb85c','#353535'],
	        chart: {
	            type: 'column'
	        },
	    credits: {
				enabled : false 	
        },
        lang: {
        	downloadJPEG: 'Télécharger sous image JPEG',
        	downloadPNG: 'Télécharger sous image PNG',
        	downloadSVG: 'Télécharger sous image SVG',
        	downloadPDF: 'Télécharger sous document PDF',
        	printChart: 'Imprimer le graphe',
        	contextButtonTitle: 'Télécharger le graphe'
    	},
        plotOptions: {
	         column: {
	             stacking: 'normal'
	         }},

	        title: {
	            text: 'Suivi des actions :'+lib
	        },

	        xAxis: {
	            categories: categories
	        },

	        yAxis: {
	            allowDecimals: false,
	            min: 0,
	            title: {
	                text: 'Nombre d\'action'
	            }
	        },

	        tooltip: {
	            formatter: function () {
	                return '<b>' + this.x + '</b><br/>' +
	                    this.series.name + ': ' + this.y +'%';
	            }
	        },
	        series: series
	    });
	}
 function myLineChart(categories,series, id,lib){
	 $(id).highcharts({
	    	colors: ['#f0ad4e', '#5cb85c'],
	        title: {
	            text: 'Suivi des actions  '+lib,
	            x: -20 //center
	        },
	        subtitle: {
	            text: '',
	            x: -20
	        },
	        xAxis: {
	            categories: categories,
	            tickPixelInterval: 300
	            
	        },
	        credits: {
					enabled : false 	
	        },
	        scrollbar: {
	        	enabled: false
	        },
	        lang: {
	        	downloadJPEG: 'Télécharger sous image JPEG',
	        	downloadPNG: 'Télécharger sous image PNG',
	        	downloadSVG: 'Télécharger sous image SVG',
	        	downloadPDF: 'Télécharger sous document PDF',
	        	printChart: 'Imprimer le graphe',
	        	contextButtonTitle: 'Télécharger le graphe'
	    	},
	        yAxis: {
	            title: {
	                text: 'Taux de réalisations (Actions)',
	                labels:{
	                    formatter: function(){
	                      if(this.value >= 0){
	                        return this.value;
	                      }
	                    }
	                  }
	            },
	            plotLines: [{
	                value: 0,
	                width: 1,
	                color: '#5cb85c'
	            }],
	            minRange:  0
	        },
	        tooltip: {
	            valueSuffix: '%'
	        },
	        legend: {
	            layout: 'horizontal',
	            align: 'center',
	            verticalAlign: 'bottom',
	            borderWidth: 0
	        },
	        series: series
	    });
}
 $(document).ready(function(){
	 var tmp_instances = [];
	 $("input[type=checkbox]#instances").on( "click", function(){
		 var tmp=$(this).attr("value");
		     aide=false;

		     if($.inArray(tmp,tmp_instances)<0){
		    	 tmp_instances.push(tmp);
			  }else{
				 tmp_instances.splice( $.inArray(tmp,tmp_instances) ,1 );
			  }
		
		var table = document.getElementById('myTab');
	    var tr = table.getElementsByTagName('tr');
	    var th = tr[0].getElementsByTagName('th');
      var les_instances=[];
	    if(tmp_instances.length>0){
	 	     les_instances=tmp_instances;
	    }else{
	    	for (var j = 0; j < th.length; j++){
	 	     les_instances.push(j+1+'');
	    	}
	 	}
	 	    for (var i = 0; i < tr.length; i++){
	 	        var td = tr[i].getElementsByTagName('td');
	 	        for (var j = 0; j < td.length; j++){
		 	        if(j!=0){
			 	        val=j+'';
						if($.inArray(val,les_instances)==-1){
		 	        		td[j].setAttribute('class','hide');
					 	    th[j+1].setAttribute('class','hide');
		 				  }else{
		 					   td[j].setAttribute('class','');
						 	   th[j+1].setAttribute('class','');
		 				  }
			 	        }
	 	        } //end for td
	 	    }// end for tr
	    
	});

	 var tmp_structures = [];
	 $("input[type=checkbox]#structures").on( "click", function(){

			 var tmp=$(this).attr("value");
		     aide=false;

		 	console.log(tmp);
		     if($.inArray(tmp,tmp_structures)<0){
		    	 tmp_structures.push(tmp);
			  }else{
				  tmp_structures.splice( $.inArray(tmp,tmp_structures) ,1 );
			  }
			  
			var table = document.getElementById('myTab');
	 	    var tr = table.getElementsByTagName('tr');
	        var les_structures=[];
	       if(tmp_structures.length>0){
	 	 	     les_structures=tmp_structures;
	 	    }else{
	 	    	for (var j = 1; j < tr.length; j=j+10){
	 	 	     les_structures.push(j+'');
	 	    	}
	 	 	}
	     console.log(les_structures);
	     i=1;
	     while(i<tr.length){
	    	 val=i+'';
	 	     k=i;
	 	    if($.inArray(val,les_structures)==-1){
				 while(k<=i+10){
	        		    tr[k].setAttribute('class','hide'); k++;
			     }
				  }else{
					 while(k<=i+10){
					    tr[k].setAttribute('class',''); k++;
					 }
				  }
		     i=i+10;
		     }
	 });


});
 </script>
	
 

 

 