<script type="text/javascript">

 $(function () {
// vue evolutive
var series = [];
	var arrSemaine = [];

	{% for sem in semaines %}
			arrSemaine[{{ loop.index0 }}] = {{ sem }};
	{% endfor %}

	{% for libelle, stats in grapheEvP %}
		series[{{ loop.index0 }}] = new Object();
		series[{{ loop.index0 }}].name = '{{ libelle|escape('js')  }}';
	{% endfor %}
	
	{% for i,datas in grapheEvP %}
		series[{{ loop.index0 }}].data = [];
		{%  for data in datas  %}
				series[{{ loop.parent.loop.index0 }}].data.push({{ data }});
		{% endfor %}
	{% endfor %}
	myLineChart (arrSemaine, series,"#mychartEvP",'Portees');


	var series = [];
	var arrSemaine = [];

	{% for sem in semaines %}
			arrSemaine[{{ loop.index0 }}] = {{ sem }};
	{% endfor %}

	{% for libelle, stats in grapheEvC %}
		series[{{ loop.index0 }}] = new Object();
		series[{{ loop.index0 }}].name = '{{ libelle|escape('js')  }}';
	{% endfor %}
	
	{% for i,datas in grapheEvC %}
		series[{{ loop.index0 }}].data = [];
		{%  for data in datas  %}
				series[{{ loop.parent.loop.index0 }}].data.push({{ data }});
		{% endfor %}
	{% endfor %}
	myLineChart (arrSemaine, series,"#mychartEvC",'en contribution');

	var series = [];
	var arrSemaine = [];

	{% for sem in semaines %}
			arrSemaine[{{ loop.index0 }}] = {{ sem }};
	{% endfor %}

	{% for libelle, stats in grapheEvM %}
		series[{{ loop.index0 }}] = new Object();
		series[{{ loop.index0 }}].name = '{{ libelle|escape('js')  }}';
	{% endfor %}
	
	{% for i,datas in grapheEvM %}
		series[{{ loop.index0 }}].data = [];
		{%  for data in datas  %}
				series[{{ loop.parent.loop.index0 }}].data.push({{ data }});
		{% endfor %}
	{% endfor %}
	myLineChart (arrSemaine, series,"#mychartEvM",'collaborateurs');
	
	
	 
// vues statitique
	 /// fonction pour stats portee
		 instances=[];
	 	series=[];
	 	
	 	{% for inst in statsP.instance %}
	 		instances[{{ loop.index0 }}] = '{{ inst.libelle }}';
		{% endfor %}
		var i=0;
		{% for libelle, stats in grapheP %}
					series[{{ loop.index0 }}] = new Object();
					series[{{ loop.index0 }}].name = '{{ libelle|escape('js')  }}';
		{% endfor %}
 		{% for libelle, stats in grapheP %}
 		     series[{{ loop.index0 }}].data = [];
				{%  for cle, val in stats  %}
							series[{{ loop.parent.loop.index0 }}].data.push({{ val }});
				{% endfor %}
			{% endfor %}
			myChart (instances, series,"#mychartStatP",'Portees');


			// pour stats contri
			 instances=[];
	 	series=[];
	 	
	 	{% for inst in statsC.instance %}
	 		instances[{{ loop.index0 }}] = '{{ inst.libelle }}';
		{% endfor %}
		var i=0;
		{% for libelle, stats in grapheC %}
					series[{{ loop.index0 }}] = new Object();
					series[{{ loop.index0 }}].name = '{{ libelle|escape('js')  }}';
		{% endfor %}
 		{% for libelle, stats in grapheC %}
 		     series[{{ loop.index0 }}].data = [];
				{%  for cle, val in stats  %}
							series[{{ loop.parent.loop.index0 }}].data.push({{ val }});
				{% endfor %}
			{% endfor %}
			myChart (instances, series,"#mychartStatC",'Contributions');

			 /// pour manager
			 	 structures=[];
	 	series=[];
	 	
	 	{% for struct in statsM.structure %}
	 		structures[{{ loop.index0 }}] = '{{ struct.libelle }}';
		{% endfor %}
		var i=0;
		{% for libelle, stats in grapheM %}
					series[{{ loop.index0 }}] = new Object();
					series[{{ loop.index0 }}].name = '{{ libelle|escape('js')  }}';
		{% endfor %}
 		{% for libelle, stats in grapheM %}
 		     series[{{ loop.index0 }}].data = [];
				{%  for cle, val in stats  %}
							series[{{ loop.parent.loop.index0 }}].data.push({{ val }});
				{% endfor %}
			{% endfor %}
			myChart (structures, series,"#mychartStatM",'Collaborateurs');
			 
 function myChart (categories , series, id, lib) {
	    $(id).highcharts({
	    	colors: ['#f0ad4e', '#5cb85c'],
	        chart: {
	            type: 'column'
	        },
	    credits: {
				enabled : false 	
        },
        lang: {
        	downloadJPEG: 'Télécharger sous image JPEG',
        	downloadPNG: 'Télécharger sous image PNG',
        	downloadSVG: 'Télécharger sous image SVG',
        	downloadPDF: 'Télécharger sous document PDF',
        	printChart: 'Imprimer le graphe',
        	contextButtonTitle: 'Télécharger le graphe'
    	},
        plotOptions: {
	         column: {
	             stacking: 'normal'
	         }},

	        title: {
	            text: 'Suivi des actions :'+lib
	        },

	        xAxis: {
	            categories: categories
	        },

	        yAxis: {
	            allowDecimals: false,
	            min: 0,
	            title: {
	                text: 'Nombre d\'action'
	            }
	        },

	        tooltip: {
	            formatter: function () {
	                return '<b>' + this.x + '</b><br/>' +
	                    this.series.name + ': ' + this.y ;
	            }
	        },
	        series: series
	    });
	}

function myLineChart(categories,series, id,lib){
	 $(id).highcharts({
	    	colors: ['#f0ad4e', '#5cb85c'],
	        title: {
	            text: 'Suivi des actions  '+lib,
	            x: -20 //center
	        },
	        subtitle: {
	            text: '',
	            x: -20
	        },
	        lang: {
	        	downloadJPEG: 'Télécharger sous image JPEG',
	        	downloadPNG: 'Télécharger sous image PNG',
	        	downloadSVG: 'Télécharger sous image SVG',
	        	downloadPDF: 'Télécharger sous document PDF',
	        	printChart: 'Imprimer le graphe',
	        	contextButtonTitle: 'Télécharger le graphe'
	    	},
	        xAxis: {
	            categories: categories,
	            tickPixelInterval: 300
	            
	        },
	        credits: {
					enabled : false 	
	        },
	        scrollbar: {
	        	enabled: false
	        },
	        yAxis: {
	            title: {
	                text: 'Taux de réalisations (Actions)',
	                labels:{
	                    formatter: function(){
	                      if(this.value >= 0){
	                        return this.value;
	                      }
	                    }
	                  }
	            },
	            plotLines: [{
	                value: 0,
	                width: 1,
	                color: '#5cb85c'
	            }],
	            minRange:  0
	        },
	        tooltip: {
	            valueSuffix: '%'
	        },
	        legend: {
	            layout: 'horizontal',
	            align: 'center',
	            verticalAlign: 'bottom',
	            borderWidth: 0
	        },
	        series: series
	    });
}
 

});
 </script>
	
 

 

 