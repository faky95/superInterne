<?php

namespace Orange\MainBundle\Repository;

use Orange\QuickMakingBundle\Repository\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Orange\MainBundle\Entity\Utilisateur;
use Orange\MainBundle\CustomInterface\RepositoryInterface;

/**
 * ControleRepository
 * This class was generated by the Doctrine ORM.
 * Add your own custom
 * repository methods below.
 */
class BaseRepository extends EntityRepository implements RepositoryInterface{
	/*
	 * (non-PHPdoc)
	 * @see \Doctrine\ORM\EntityRepository::findAll()
	 */
	protected function fullName($entityName) {
		return 'Orange\\MainBundle\\Entity\\'.$entityName;
	}
	
	public function filter(){
		//filtre faite au niveau des repository de chaque entite
	}
	
	public function listQueryBuilder() {
		// TODO: Auto-generated method stub
		return $this->filter();
	}
	
	public function filterByProfile(QueryBuilder $queryBuilder, $alias = null, $role = null) {
		if(!$alias) {
			$aliases = $queryBuilder->getRootAliases();
			$alias = $aliases[0];
		}
		if($role && $role==Utilisateur::ROLE_SUPER_ADMIN && $this->_user->hasRole(Utilisateur::ROLE_SUPER_ADMIN)) {
		} elseif($role && $role==Utilisateur::ROLE_ADMIN && $this->_user->hasRole(Utilisateur::ROLE_ADMIN)) {
			$bu = $this->_user->getStructure()->getBuPrincipal();
			$queryBuilder->andWhere($alias.'.id = :buId')->setParameter('buId', $bu->getId());
		} elseif($role && $role==Utilisateur::ROLE_ANIMATEUR_ONLY && $this->_user->hasRole(Utilisateur::ROLE_ANIMATEUR_ONLY)) {
			$instanceIds = array();
			$anims = $this->_user->getAnimators(true);
			foreach($anims as $anim) {
				$instanceIds[] = $anim->getInstance()->getId();
			}
			$queryBuilder->andWhere($alias.'.id IN (:instanceIds)')->setParameter('instanceIds', $instanceIds);
		} elseif($role && $role==Utilisateur::ROLE_ANIMATEUR && $this->_user->hasRole(Utilisateur::ROLE_ANIMATEUR)) {
			$instanceIds = array();
			$anims = $this->_user->getAnimators();
			foreach($anims as $anim) {
				$instanceIds[] = $anim->getInstance()->getId();
			}
			$queryBuilder->andWhere($alias.'.id IN (:instanceIds)')->setParameter('instanceIds', $instanceIds);
		} elseif($role && $role==Utilisateur::ROLE_MANAGER && $this->_user->hasRole(Utilisateur::ROLE_MANAGER)) {
			$structure = $this->_user->getStructure();
			$queryBuilder->andWhere($alias.'.lvl >= :lvl')
				->andWhere($alias.'.root = :root')
				->andWhere($alias.'.lft  >= :lft')
				->andWhere($alias.'.rgt <= :rgt')
				->setParameter('lvl', $structure->getLvl())
				->setParameter('root', $structure->getRoot())
				->setParameter('lft', $structure->getLft())
				->setParameter('rgt', $structure->getRgt());
		} elseif($role && $role==Utilisateur::ROLE_SOURCE && $this->_user->hasRole(Utilisateur::ROLE_SOURCE)) {
			$sourceIds = array ();
			$sources = $this->_user->getSources();
			foreach($sources as $source) {
				$sourceIds[] = $source->getId ();
			}
			$queryBuilder->andWhere($alias.'.id IN (:sourceIds)')->setParameter('sourceIds', $sourceIds);
		} elseif($role && $role==Utilisateur::ROLE_CHEF_PROJET && $this->_user->hasRole(Utilisateur::ROLE_CHEF_PROJET)) {
			$projetIds = array ();
			foreach($this->_user->getProjet() as $projet) {
				$projetIds[] = $projet->getId();
			}
			$queryBuilder->andWhere($alias.'.id IN (:projetIds)')->setParameter('projetIds', $projetIds);
		} elseif($role && $role==Utilisateur::ROLE_CHEF_CHANTIER && $this->_user->hasRole(Utilisateur::ROLE_CHEF_CHANTIER)) {
			$chantierIds = array ();
			foreach($this->_user->getChantier() as $chantier) {
				$chantierIds[] = $chantier->getId();
			}
			$queryBuilder->andWhere($alias.'.id IN (:chantierIds)')->setParameter('chantierIds', $chantierIds);
		} elseif($role && $role==Utilisateur::ROLE_GESTIONNAIRE_ESPACE && $this->_user->hasRole(Utilisateur::ROLE_GESTIONNAIRE_ESPACE)) {
			$espaceIds = array ();
			$espaces = $this->_user->getMembreEspace();
			foreach($espaces as $espace) {
				$espaceIds[] = $espace->getEspace()->getId();
			}
			$queryBuilder->andWhere($alias.'.id IN (:espaceIds)')->setParameter('espaceIds', $espaceIds);
		} elseif($role && $role==Utilisateur::ROLE_PORTEUR && $this->_user->hasRole(Utilisateur::ROLE_PORTEUR)) {
			$usrId = $this->_user->getId();
			$queryBuilder->andWhere($alias.'.id = :usrId')->setParameter('usrId', $usrId);
		} elseif($role && $role==Utilisateur::ROLE_RAPPORTEUR && $this->_user->hasRole(Utilisateur::ROLE_RAPPORTEUR)) {
			$structuresIds = array ();
			$structures = $this->_user->getRapporteurStructure();
			$nodes=$this->_em->getRepository('OrangeMainBundle:Structure')->getChildren($structures)->getQuery()->getResult();
			foreach($nodes as $structure) 
				$structuresIds[] = $structure->getId();
			
			$queryBuilder->andWhere($alias.'.id IN (:structuresIds)')->setParameter('structuresIds', $structuresIds);
		} elseif($role && $role==Utilisateur::ROLE_CONTRIBUTEUR && $this->_user->hasRole(Utilisateur::ROLE_CONTRIBUTEUR)) {
			$ctrbIds = array ();
			$contrib = $this->_user->getContributeurs();
			foreach($contrib as $ctb)
				$ctrbIds[] = $ctb->getId();
					
				$queryBuilder->andWhere($alias.'.id IN (:ctbIds)')->setParameter('ctbIds', $ctrbIds);
			
		} elseif($role) {
			$queryBuilder->andWhere($alias.'.id = -1');
		}
		return $queryBuilder;
	}
	
	/**
	 * check empty array
	 * @param array $data
	 */
	protected function checkEmptyArray($data = array()) {
		return count($data)==0 ? array(0) : $data;
	}
	
 }